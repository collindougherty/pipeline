scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = label_percent(scale = 1))
# return(long_df)
}
# Example usage
plot_significant_vars(df, significant_vars = c('bethesda', 'molecularresult', 'carcinoma', 'comp1reop', 'merge1', 'merge2', 'thyroidnodulepetavid', 'surg', 'group', 'comp2', 'recurrence'), target_var = "petgroup")
library(tidyverse)
library(scales)
plot_significant_vars <- function(df, significant_vars, target_var) {
# Prepare the data for plotting
# Prepare the data for plotting
long_df <- df %>%
select(c(target_var, significant_vars)) %>%
pivot_longer(cols = significant_vars, names_to = "variable", values_to = "category") %>%
group_by(variable, category, .data[[target_var]]) %>%
summarise(count = n(), .groups = 'drop') %>%
ungroup %>%
group_by(variable) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
mutate(perc = count / total)
# Plot
ggplot(long_df, aes(x = category, y = perc, fill = .data[[target_var]])) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~variable, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Percentage", x = "Category") +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = label_percent(scale = 1))
# return(long_df)
}
# Example usage
plot_significant_vars(df, significant_vars = c('bethesda', 'molecularresult', 'carcinoma', 'comp1reop', 'merge1', 'merge2', 'thyroidnodulepetavid', 'surg', 'group', 'comp2', 'recurrence'), target_var = "petgroup")
library(tidyverse)
library(scales)
plot_significant_vars <- function(df, significant_vars, target_var) {
# Prepare the data for plotting
# Prepare the data for plotting
long_df <- df %>%
select(c(target_var, significant_vars)) %>%
pivot_longer(cols = significant_vars, names_to = "variable", values_to = "category") %>%
group_by(variable, category, .data[[target_var]]) %>%
summarise(count = n(), .groups = 'drop') %>%
ungroup %>%
group_by(variable) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
mutate(perc = count / total)
# Plot
ggplot(long_df, aes(x = category, y = perc, fill = .data[[target_var]])) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~variable, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Percentage", x = "Category") +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = label_percent(scale = 100))
# return(long_df)
}
# Example usage
plot_significant_vars(df, significant_vars = c('bethesda', 'molecularresult', 'carcinoma', 'comp1reop', 'merge1', 'merge2', 'thyroidnodulepetavid', 'surg', 'group', 'comp2', 'recurrence'), target_var = "petgroup")
library(tidyverse)
library(scales)
plot_significant_vars <- function(df, significant_vars, target_var) {
# Prepare the data for plotting
# Prepare the data for plotting
long_df <- df %>%
select(c(target_var, significant_vars)) %>%
pivot_longer(cols = significant_vars, names_to = "variable", values_to = "category") %>%
group_by(variable, category, .data[[target_var]]) %>%
summarise(count = n(), .groups = 'drop') %>%
ungroup %>%
group_by(variable, petgroup) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
mutate(perc = count / total)
# Plot
ggplot(long_df, aes(x = category, y = perc, fill = .data[[target_var]])) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~variable, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Percentage", x = "Category") +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = label_percent(scale = 100))
# return(long_df)
}
# Example usage
plot_significant_vars(df, significant_vars = c('bethesda', 'molecularresult', 'carcinoma', 'comp1reop', 'merge1', 'merge2', 'thyroidnodulepetavid', 'surg', 'group', 'comp2', 'recurrence'), target_var = "petgroup")
library(tidyverse)
library(scales)
plot_significant_vars <- function(df, significant_vars, target_var) {
# Prepare the data for plotting
# Prepare the data for plotting
long_df <- df %>%
select(c(target_var, significant_vars)) %>%
pivot_longer(cols = significant_vars, names_to = "variable", values_to = "category") %>%
group_by(variable, category, .data[[target_var]]) %>%
summarise(count = n(), .groups = 'drop') %>%
ungroup %>%
group_by(variable, petgroup) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
mutate(perc = count / total)
# Plot
ggplot(long_df, aes(x = category, y = perc, fill = .data[[target_var]])) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~variable, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Percentage", x = "Category") +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = label_percent(scale = 100)) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET"))
# return(long_df)
}
# Example usage
plot_significant_vars(df, significant_vars = c('bethesda', 'molecularresult', 'carcinoma', 'comp1reop', 'merge1', 'merge2', 'thyroidnodulepetavid', 'surg', 'group', 'comp2', 'recurrence'), target_var = "petgroup")
# Reshape the matched data for faceted plotting
long_matched_data <- matched_data %>%
gather(key = "Outcome", value = "Value", pretsh, sizepath, lnsize, raidose, futsh, futg, futgab, age, fumonths) %>%
filter(!is.na(Value))  # Assuming you want to remove NA values
# Create faceted plots with bar and jitter overlay
p <- ggplot(long_matched_data, aes(x = factor(petgroup), y = Value, fill = factor(petgroup))) +
geom_bar(stat = "summary", fun = "mean", position = position_dodge(width = 0.8), width = 0.7) +
geom_jitter(width = 0.2, size = 1.5, alpha = 0.5) +
facet_wrap(~ Outcome, scales = "free_y") +
labs(title = "Comparison of Outcomes by Group with Data Spread",
x = "Group",
y = "Measured Value",
fill = "Group Category") +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(face = "bold", size = 16),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET")) +
theme(panel.grid.major = element_line(colour = "grey80"),
panel.grid.minor = element_blank())
p
ggsave('numeric_plot.png', plot = p)
ggsave('cat_plot.png', plot = p)
library(tidyverse)
library(scales)
plot_significant_vars <- function(df, significant_vars, target_var) {
# Prepare the data for plotting
# Prepare the data for plotting
long_df <- df %>%
select(c(target_var, significant_vars)) %>%
pivot_longer(cols = significant_vars, names_to = "variable", values_to = "category") %>%
group_by(variable, category, .data[[target_var]]) %>%
summarise(count = n(), .groups = 'drop') %>%
ungroup %>%
group_by(variable, petgroup) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
mutate(perc = count / total)
# Plot
p <- ggplot(long_df, aes(x = category, y = perc, fill = .data[[target_var]])) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~variable, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Percentage", x = "Category") +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = label_percent(scale = 100)) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET"))
return(p)
}
# Example usage
p <- plot_significant_vars(df, significant_vars = c('bethesda', 'molecularresult', 'carcinoma', 'comp1reop', 'merge1', 'merge2', 'thyroidnodulepetavid', 'surg', 'group', 'comp2', 'recurrence'), target_var = "petgroup")
ggsave('cat_plot.png', plot = p)
# Reshape the matched data for faceted plotting
long_matched_data <- matched_data %>%
gather(key = "Outcome", value = "Value", pretsh, sizepath, lnsize, raidose, futsh, futg, futgab, age, fumonths) %>%
filter(!is.na(Value))  # Assuming you want to remove NA values
# Create faceted plots with bar and jitter overlay
p <- ggplot(long_matched_data, aes(x = factor(petgroup), y = Value, fill = factor(petgroup))) +
geom_bar(stat = "summary", fun = "mean", position = position_dodge(width = 0.8), width = 0.7) +
geom_jitter(width = 0.2, size = 1.5, alpha = 0.5) +
facet_wrap(~ Outcome, scales = "free_y") +
labs(title = "Comparison of Outcomes by Group with Data Spread",
x = "Group",
y = "Measured Value",
fill = "Group Category") +
theme(plot.title = element_text(face = "bold", size = 16),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET")) +
theme(panel.grid.major = element_line(colour = "grey80"),
panel.grid.minor = element_blank())+
theme_minimal(base_size = 14)
p
ggsave('numeric_plot.png', plot = p)
# Reshape the matched data for faceted plotting
long_matched_data <- matched_data %>%
gather(key = "Outcome", value = "Value", pretsh, sizepath, lnsize, raidose, futsh, futg, futgab, age, fumonths) %>%
filter(!is.na(Value))  # Assuming you want to remove NA values
# Create faceted plots with bar and jitter overlay
p <- ggplot(long_matched_data, aes(x = factor(petgroup), y = Value, fill = factor(petgroup))) +
geom_bar(stat = "summary", fun = "mean", position = position_dodge(width = 0.8), width = 0.7) +
geom_jitter(width = 0.2, size = 1.5, alpha = 0.5) +
facet_wrap(~ Outcome, scales = "free_y") +
labs(title = "Comparison of Outcomes by Group with Data Spread",
x = "Group",
y = "Measured Value",
fill = "Group Category") +
theme(plot.title = element_text(face = "bold", size = 16),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET")) +
theme(panel.grid.major = element_line(colour = "grey80"),
panel.grid.minor = element_blank())+
theme_minimal()
ggsave('numeric_plot.png', plot = p)
library(tidyverse)
library(scales)
plot_significant_vars <- function(df, significant_vars, target_var) {
# Prepare the data for plotting
# Prepare the data for plotting
long_df <- df %>%
select(c(target_var, significant_vars)) %>%
pivot_longer(cols = significant_vars, names_to = "variable", values_to = "category") %>%
group_by(variable, category, .data[[target_var]]) %>%
summarise(count = n(), .groups = 'drop') %>%
ungroup %>%
group_by(variable, petgroup) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
mutate(perc = count / total)
# Plot
p <- ggplot(long_df, aes(x = category, y = perc, fill = .data[[target_var]])) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~variable, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Percentage", x = "Category") +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = label_percent(scale = 100)) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET")) +
theme_minimal()
return(p)
}
# Example usage
p <- plot_significant_vars(df, significant_vars = c('bethesda', 'molecularresult', 'carcinoma', 'comp1reop', 'merge1', 'merge2', 'thyroidnodulepetavid', 'surg', 'group', 'comp2', 'recurrence'), target_var = "petgroup")
ggsave('cat_plot.png', plot = p)
ggsave('cat_plot.png', plot = p, bg = "white")
# Reshape the matched data for faceted plotting
long_matched_data <- matched_data %>%
gather(key = "Outcome", value = "Value", pretsh, sizepath, lnsize, raidose, futsh, futg, futgab, age, fumonths) %>%
filter(!is.na(Value))  # Assuming you want to remove NA values
# Create faceted plots with bar and jitter overlay
p <- ggplot(long_matched_data, aes(x = factor(petgroup), y = Value, fill = factor(petgroup))) +
geom_bar(stat = "summary", fun = "mean", position = position_dodge(width = 0.8), width = 0.7) +
geom_jitter(width = 0.2, size = 1.5, alpha = 0.5) +
facet_wrap(~ Outcome, scales = "free_y") +
labs(title = "Comparison of Outcomes by Group with Data Spread",
x = "Group",
y = "Measured Value",
fill = "Group Category") +
theme(plot.title = element_text(face = "bold", size = 16),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET")) +
theme(panel.grid.major = element_line(colour = "grey80"),
panel.grid.minor = element_blank())+
theme_minimal()
ggsave('numeric_plot.png', plot = p, bg = "white")
# Reshape the matched data for faceted plotting
long_matched_data <- matched_data %>%
gather(key = "Outcome", value = "Value", pretsh, sizepath, lnsize, raidose, futsh, futg, futgab, age, fumonths) %>%
filter(!is.na(Value))  # Assuming you want to remove NA values
# Create faceted plots with bar and jitter overlay
p <- ggplot(long_matched_data, aes(x = factor(petgroup), y = Value, fill = factor(petgroup))) +
geom_bar(stat = "summary", fun = "mean", position = position_dodge(width = 0.8), width = 0.7) +
geom_jitter(width = 0.2, size = 1.5, alpha = 0.5) +
facet_wrap(~ Outcome, scales = "free_y") +
labs(title = "Comparison of Variables by petgroup with Raw Data",
x = "Group",
y = "Measured Value",
fill = "Group Category") +
theme(plot.title = element_text(face = "bold", size = 16),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET")) +
theme(panel.grid.major = element_line(colour = "grey80"),
panel.grid.minor = element_blank())+
theme_minimal()
ggsave('numeric_plot.png', plot = p, bg = "white")
library(tidyverse)
library(scales)
plot_significant_vars <- function(df, significant_vars, target_var) {
# Prepare the data for plotting
# Prepare the data for plotting
long_df <- df %>%
select(c(target_var, significant_vars)) %>%
pivot_longer(cols = significant_vars, names_to = "variable", values_to = "category") %>%
group_by(variable, category, .data[[target_var]]) %>%
summarise(count = n(), .groups = 'drop') %>%
ungroup %>%
group_by(variable, petgroup) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
mutate(perc = count / total)
# Plot
p <- ggplot(long_df, aes(x = category, y = perc, fill = .data[[target_var]])) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~variable, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Percentage", x = "Category", title = "Percentage of each petgroup in each variable category") +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = label_percent(scale = 100)) +
scale_fill_manual(values = c("#1f77b4", "#d62728"),
labels = c("Control", "PET")) +
theme_minimal()
return(p)
}
# Example usage
p <- plot_significant_vars(df, significant_vars = c('bethesda', 'molecularresult', 'carcinoma', 'comp1reop', 'merge1', 'merge2', 'thyroidnodulepetavid', 'surg', 'group', 'comp2', 'recurrence'), target_var = "petgroup")
ggsave('cat_plot.png', plot = p, bg = "white")
# lets start by getting the package
library(haven)
library(glm2)
library(tidyverse)
library(MatchIt)
# Read the DTA file
file_path <- "/Users/collindougherty/Documents/Work/UNMC/Fingerett/PET thyroid data master combined with TT TL data master 8.13.23.dta"
data <- read_dta(file_path)
# Define the matching variables and outcome of interest
matching_vars <- c("sex", "age", "sizepath", "path")
outcomes <- c("lnpos", "lnsize", "tstage", "rtt", "recurrence", "reop", "futg")
# omit na's in petgroup
data <- data %>% drop_na(petgroup, sex, age, sizepath, path)
data <- data %>% mutate(petgroup = ifelse(petgroup == 2, 0, 1))
# Begin with logistic regression predicting petgroup from matching variables
model <- glm(petgroup ~ sex + age + sizepath + path,
data = data, family = binomial)
# Create a propensity score
data$ps <- predict(model, type = "response")
# do some analysis of the propensity score
p1 <- data %>% ggplot(aes(x = ps, fill = factor(petgroup))) +
geom_density(alpha = 0.5) +
# add names to the legend
scale_fill_discrete(name = "Group",
labels = c("Control", "PET")) +
labs(title = "Propensity Score Distribution",
x = "Propensity Score",
y = "Density",
fill = "Group") +
theme_minimal()
plot(p1)
library(MatchIt)
matching_method <- "nearest" # You can use other methods as well
m.out <- matchit(petgroup ~ sex + age + sizepath + path,
method = matching_method,
data = data)
# Getting the matched data
matched_data <- match.data(m.out)
# Check balance for each matching variable
summary(m.out, standardize = TRUE)
outcomes <- matched_data %>% select(all_of(outcomes), petgroup)
library(tidyr)
# Reshape the matched data for faceted plotting
long_matched_data <- matched_data %>%
gather(key = "Outcome", value = "Value", lnpos, lnsize, tstage) %>%
filter(!is.na(Value))  # Assuming you want to remove NA values
# Create faceted boxplots
p <- ggplot(long_matched_data, aes(x = factor(petgroup), y = Value, fill = factor(petgroup))) +
geom_boxplot() +
facet_wrap(~ Outcome, scales = "free_y") +
labs(title = "Faceted Boxplots of Outcomes by Group",
x = "Group",
y = "Outcome Value",
fill = "Group") +
theme_minimal() +
scale_fill_manual(values = c("blue", "red"),
labels = c("Control", "PET"))
p
library(tidyr)
# Reshape the matched data for faceted plotting
long_matched_data <- matched_data %>%
gather(key = "Outcome", value = "Value", lnpos, lnsize, tstage) %>%
filter(!is.na(Value))  # Assuming you want to remove NA values
# Create faceted boxplots
p <- ggplot(long_matched_data, aes(x = factor(petgroup), y = Value, fill = factor(petgroup))) +
geom_boxplot() +
facet_wrap(~ Outcome, scales = "free_y") +
labs(title = "Faceted Boxplots of Outcomes by Group",
x = "Group",
y = "Outcome Value",
fill = "Group") +
theme_minimal() +
scale_fill_manual(values = c("blue", "red"),
labels = c("Control", "PET"))
p
library(tidyr)
# Reshape the matched data for faceted plotting
long_matched_data <- matched_data %>%
gather(key = "Outcome", value = "Value", lnpos, lnsize, reop, futg, thyroiditis, nstage, lnremoved, lnsize, posttsh, futgab, age) %>%
filter(!is.na(Value))  # Assuming you want to remove NA values
# Create faceted bar charts with mean values in black and white theme
p2 <- ggplot(long_matched_data, aes(x = factor(petgroup), y = Value, fill = factor(petgroup))) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(), color = "darkgrey") +
stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge(0.9), width = 0.25) +
facet_wrap(~ Outcome, scales = "free_y") +
labs(title = "Mean Outcomes by Group",
x = "Group",
y = "Mean Outcome Value",
fill = "Group") +
theme_bw() +
scale_fill_manual(values = c("darkgrey", "white"),
labels = c("Control", "PET")) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "darkgrey"))
p2
ggsave('original.png', p2, bg="white")
shiny::runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
rm(list = ls())
# Load necessary libraries
library(survival)
library(survminer)
# Simulate some cardiovascular data
set.seed(123) # for reproducibility
sample_size <- 100
data <- data.frame(
age = rnorm(sample_size, 50, 10),
cholesterol = rnorm(sample_size, 200, 50),
systolic_bp = rnorm(sample_size, 120, 15),
treatment = sample(c('A', 'B'), sample_size, replace = TRUE),
time_to_event = rexp(sample_size, rate = 0.1),
status = sample(0:1, sample_size, replace = TRUE)
)
# Fit a Cox proportional hazards model
cox_fit <- coxph(Surv(time_to_event, status) ~ age + cholesterol + systolic_bp + treatment, data = data)
# Summarize the coxph fit
cox_summary <- summary(cox_fit)
# Print the summary to the console
print(cox_summary)
# Visualize the results
# Plotting the coefficients
plot(cox_fit)
View(cox_summary)
cox_summary[["conf.int"]]
cox_summary[["logtest"]]
cox_summary[["coefficients"]]
shiny::runApp('frontend')
runApp('frontend')
cox_summary[["coefficients"]]
c <- cox_summary[["coefficients"]]
c$coef
c[['coef']]
c
colnames(c)
cox_summary[["coefficients"]][["coef"]]
runApp('frontend')
c
colnames(c)
coef_vector <- c[, "coef"]
runApp('frontend')
c
rownames(c)
coefs_matrix <- c
# Include the row names (variable names) as the first column of the data frame
summary_df <- data.frame(
Variable = rownames(coefs_matrix),
Estimate = coefs_matrix[, "coef"],
expEstimate = coefs_matrix[, "exp(coef)"],
StdErr = coefs_matrix[, "se(coef)"],
ZValue = coefs_matrix[, "z"],
PValue = coefs_matrix[, "Pr(>|z|)"]
)
View(summary_df)
coefs_matrix <- c
# Include the row names (variable names) as the first column of the data frame
summary_df <- data.frame(
Estimate = coefs_matrix[, "coef"],
expEstimate = coefs_matrix[, "exp(coef)"],
StdErr = coefs_matrix[, "se(coef)"],
ZValue = coefs_matrix[, "z"],
PValue = coefs_matrix[, "Pr(>|z|)"]
)
colnames(summary_df) <- c("Estimate", "exp(Coef)", "SE", "z", "p-Value")
colnames(summary_df) <- c("Estimate", "exp(Coef)", "SE", "z", "p-Values")
colnames(summary_df) <- c("Estimate", "exp(Coef)", "SE", "z", "p-Value")
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
runApp('frontend')
rm(list=ls())
runApp('frontend')
shiny::runApp('frontend')
shiny::runApp('frontend')
